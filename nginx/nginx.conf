# NGINX Configuration for Connect Service Microservice Integration
# This configuration provides load balancing, SSL termination, and routing

events {
    worker_connections 1024;
}

http {
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=connect_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=connect_limit_v2:10m rate=20r/s;

    # Upstream Servers
    upstream connect_service {
        least_conn;
        server connect-service:8080 max_fails=3 fail_timeout=30s weight=1;
        # Add more instances as needed
        # server connect-service-2:8080 max_fails=3 fail_timeout=30s weight=1;
        # server connect-service-3:8080 max_fails=3 fail_timeout=30s weight=1;
    }

    # Health Check Upstream
    upstream health_check {
        server connect-service:8080;
    }

    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Security Headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';" always;

    # Main Server Block
    server {
        listen 80;
        server_name connect-service.local localhost;

        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }

    # HTTPS Server Block
    server {
        listen 443 ssl http2;
        server_name connect-service.local localhost;

        # SSL Certificate Configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        # CORS Configuration
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With, X-Correlation-Id, X-API-Key" always;
        add_header Access-Control-Max-Age 3600 always;

        # Handle OPTIONS requests
        location / {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With, X-Correlation-Id, X-API-Key";
                add_header Access-Control-Max-Age 3600;
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
        }

        # Health Check Endpoint
        location /health {
            proxy_pass http://health_check/api/v1/connect/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # No rate limiting for health checks
            access_log off;
        }

        # API v1.0 Routes
        location /api/v1/connect {
            # Rate limiting for v1
            limit_req zone=connect_limit burst=20 nodelay;
            
            # Proxy to Connect Service
            proxy_pass http://connect_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-API-Version "1.0";
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # Error handling
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
            
            # Add response headers
            add_header X-API-Version "1.0" always;
            add_header X-Served-By "nginx" always;
        }

        # API v2.0 Routes
        location /api/v2/connect {
            # Rate limiting for v2 (higher limits)
            limit_req zone=connect_limit_v2 burst=40 nodelay;
            
            # Proxy to Connect Service
            proxy_pass http://connect_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-API-Version "2.0";
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # Error handling
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
            
            # Add response headers
            add_header X-API-Version "2.0" always;
            add_header X-Served-By "nginx" always;
        }

        # Swagger UI
        location /swagger-ui {
            proxy_pass http://connect_service/api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # OpenAPI Documentation
        location /v3/api-docs {
            proxy_pass http://connect_service/api/v3/api-docs;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Metrics Endpoint (Restricted)
        location /actuator {
            # Allow only from internal networks
            allow 172.20.0.0/16;
            allow 10.0.0.0/8;
            allow 192.168.0.0/16;
            deny all;
            
            proxy_pass http://connect_service/api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Default location for unmatched requests
        location / {
            return 404 '{"error": "NOT_FOUND", "message": "Endpoint not found", "available_endpoints": ["/api/v1/connect", "/api/v2/connect", "/health", "/swagger-ui"]}';
            add_header Content-Type application/json always;
        }

        # Error pages
        error_page 404 /404.json;
        error_page 500 502 503 504 /50x.json;

        location = /404.json {
            internal;
            return 404 '{"error": "NOT_FOUND", "message": "The requested resource was not found"}';
            add_header Content-Type application/json always;
        }

        location = /50x.json {
            internal;
            return 500 '{"error": "INTERNAL_ERROR", "message": "An internal server error occurred"}';
            add_header Content-Type application/json always;
        }
    }

    # Additional Server Block for Development (HTTP only)
    server {
        listen 8080;
        server_name connect-service-dev.local localhost;

        # Development CORS
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With, X-Correlation-Id, X-API-Key" always;

        # Health Check
        location /health {
            proxy_pass http://health_check/api/v1/connect/health;
            access_log off;
        }

        # API Routes
        location /api/ {
            proxy_pass http://connect_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Swagger UI
        location /swagger-ui {
            proxy_pass http://connect_service/api;
        }

        # OpenAPI Docs
        location /v3/api-docs {
            proxy_pass http://connect_service/api/v3/api-docs;
        }
    }
}
