# Docker Compose for Microservice Integration
# This file sets up the Connect Service with all necessary dependencies
# for microservice integration testing and development

version: '3.8'

services:
  # Connect Service
  connect-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: connect-service
    ports:
      - "8080:8080"
      - "8081:8081"  # Management port
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - MANAGEMENT_SERVER_PORT=8081
      - EUREKA_INSTANCE_INSTANCE_ID=connect-service-${HOSTNAME}
      - API_VERSION=2.0
      - ENVIRONMENT=docker
      - REGION=us-east-1
      - MONGODB_URI=mongodb://mongodb:27017/connect-service
      - APIGEE_CLIENT_ID=test-client-id
      - APIGEE_CLIENT_SECRET=test-client-secret
      - FENERGO_CLIENT_ID=test-fenergo-client
      - FENERGO_CLIENT_SECRET=test-fenergo-secret
      - APIGEE_TOKEN_URI=https://api.apigee.com/oauth/token
      - FENERGO_TOKEN_URI=https://api.fenergo.com/oauth/token
      - XML_TO_JSON_API_URL=http://xml-to-json-service:3000/api
      - FENERGO_API_URL=http://fenergo-service:3001/api
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
    depends_on:
      - mongodb
      - consul
      - xml-to-json-service
      - fenergo-service
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/connect/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.connect-service.rule=Host(`connect-service.local`)"
      - "traefik.http.routers.connect-service.entrypoints=web"
      - "traefik.http.services.connect-service.loadbalancer.server.port=8080"

  # MongoDB
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=connect-service
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Consul for Service Discovery
  consul:
    image: consul:1.15
    container_name: consul
    ports:
      - "8500:8500"
    command: agent -server -bootstrap-expect=1 -client=0.0.0.0 -ui -datacenter=dc1
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    volumes:
      - consul_data:/consul/data
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mock XML to JSON Service
  xml-to-json-service:
    image: mockserver/mockserver:5.15.0
    container_name: xml-to-json-service
    ports:
      - "3000:1080"
    environment:
      - MOCKSERVER_INITIALIZATION_JSON_PATH=/config/mock-config.json
    volumes:
      - ./mocks/xml-to-json-mock.json:/config/mock-config.json:ro
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1080/mockserver/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mock Fenergo Service
  fenergo-service:
    image: mockserver/mockserver:5.15.0
    container_name: fenergo-service
    ports:
      - "3001:1080"
    environment:
      - MOCKSERVER_INITIALIZATION_JSON_PATH=/config/mock-config.json
    volumes:
      - ./mocks/fenergo-mock.json:/config/mock-config.json:ro
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1080/mockserver/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: nginx-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - connect-service
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zipkin for Alternative Tracing
  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9411/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local
  consul_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local

networks:
  microservice-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
